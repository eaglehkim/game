#include <iostream>
#include <conio.h>

#define LINE 12

int check(char* board);

int main()
{
	char board[LINE * LINE] = { };
	int player = 0;

	for (int i = 0; i < LINE * LINE; ++i)
	{
		board[i] = '+';
	}

	int cur = LINE * LINE / 2 + (LINE / 2);
	board[cur] = 's';

	char tmpB = '+';
	char tmpA = '+';

	int win = 3;

	while (true)
	{
		system("cls");		

		std::cout << "======================================" << std::endl;
		std::cout << "      CONNECTION GAME (O MOK)      " << std::endl;
		std::cout << "======================================" << std::endl;

		for (int i = 0; i < LINE; ++i)
		{
			std::cout << '\t';
			for (int j = 0; j < LINE; ++j)
			{
				if (board[(i * LINE) + j] == 's')
				{
					if (player == 0)
						std::cout << 'O' << " ";
					else if (player == 1)
						std::cout << 'X' << " ";
				}
				else
					std::cout << board[(i * LINE) + j] << " ";
			}
			std::cout << std::endl;
		}

		if (player == 0)
		{
			std::cout << "\t   PLAYER 1 TURN" << std::endl;
		}
		else if (player == 1)
		{
			std::cout << "\t   PLAYER 2 TURN" << std::endl;
		}

		std::cout << "w : UP, s : DOWN, a :LEFT, d : RIGHT, p : SELECT, q : EXIT" << std::endl;	

		win = check(board);

		if (win == 0 || win == 1)
			break;

		char cInput = _getch();	

		if (tolower(cInput) == 'q')
			break;

		switch (tolower(cInput))
		{
		case 'w':
			if (cur > LINE - 1)
			{
				tmpB = board[cur - LINE];
				board[cur - LINE] = 's';
				board[cur] = tmpA;
				cur -= LINE;
				tmpA = tmpB;
			}
			break;
		case 's':
			if (cur < LINE * LINE - LINE)
			{
				tmpB = board[cur + LINE];
				board[cur + LINE] = 's';
				board[cur] = tmpA;
				cur += LINE;
				tmpA = tmpB;
			}
			break;
		case 'a':
			if (cur % LINE != 0)
			{
				tmpB = board[cur - 1];
				board[cur - 1] = 's';
				board[cur] = tmpA;
				cur -= 1;
				tmpA = tmpB;
			}
			break;
		case 'd':
			if (cur % LINE != LINE - 1)
			{
				tmpB = board[cur + 1];
				board[cur + 1] = 's';
				board[cur] = tmpA;
				cur += 1;
				tmpA = tmpB;
			}
			break;
		case 'p':
			if (player == 0)
			{
				tmpA = 'O';
				++player;
			}
			else if (player == 1)
			{	
				tmpA = 'X';
				--player;
			}
			break;
		}		
	}

	if (win == 0)
		std::cout << "\tPLAYER 1 WIN!!";
	if (win == 1)
		std::cout << "\tPLAYER 2 WIN!!";

	return 0;
}

int check(char* board)
{
	int win = 2;

	// ver hor
	for (int i = 0; i <= LINE - 5; ++i)
	{
		for (int j = 0; j <= LINE - 5; ++j)
		{
			if (board[(i * LINE) + j] == 'O' && board[(i * LINE) + j + 1] == 'O' && board[(i * LINE) + j + 2] == 'O'
				&& board[(i * LINE) + j + 3] == 'O' && board[(i * LINE) + j + 4] == 'O')
				win = 0;
			else if (board[(i * LINE) + j + LINE] == 'O' && board[(i * LINE) + j + (LINE * 2)] == 'O' 
				&& board[(i * LINE) + j + (LINE * 3)] == 'O'
				&& board[(i * LINE) + j + (LINE * 4)] == 'O' && board[(i * LINE) + j + (LINE * 5)] == 'O')
				win = 0;			
			else if (board[(i * LINE) + j] == 'X' && board[(i * LINE) + j + 1] == 'X' && board[(i * LINE) + j + 2] == 'X'
				&& board[(i * LINE) + j + 3] == 'X' && board[(i * LINE) + j + 4] == 'X')
				win = 1;
			else if (board[(i * LINE) + j + LINE] == 'X' && board[(i * LINE) + j + (LINE * 2)] == 'X' 
				&& board[(i * LINE) + j + (LINE * 3)] == 'X'
				&& board[(i * LINE) + j + (LINE * 4)] == 'X' && board[(i * LINE) + j + (LINE * 5)] == 'X')
				win = 0;
		}
	}

	//diag
	for (int i = 4; i < LINE; ++i)
	{
		for (int j = 0; j < LINE - 5; ++j)
		{
			if (board[(i * LINE) + j] == 'O' && board[((i - 1) * LINE) + (j + 1)] == 'O'
				&& board[((i - 2) * LINE) + (j + 2)] == 'O' && board[((i - 3) * LINE) + (j + 3)] == 'O'
				&& board[((i - 4) * LINE) + (j + 4)] == 'O')
				win = 1;
			else if (board[(i * LINE) + j] == 'X' && board[((i - 1) * LINE) + (j + 1)] == 'X'
				&& board[((i - 2) * LINE) + (j + 2)] == 'X' && board[((i - 3) * LINE) + (j + 3)] == 'X'
				&& board[((i - 4) * LINE) + (j + 4)] == 'X')
				win = 1;
		}
	}

	//diag
	for (int i = 0; i < LINE - 5; ++i)
	{
		for (int j = 0; j < LINE - 5; ++j)
		{
			if (board[(i * LINE) + j] == 'O' && board[((i + 1) * LINE) + (j + 1)] == 'O'
				&& board[((i + 2) * LINE) + (j + 2)] == 'O' && board[((i + 3) * LINE) + (j + 3)] == 'O'
				&& board[((i + 4) * LINE) + (j + 4)] == 'O')
				win = 1;
			else if (board[(i * LINE) + j] == 'X' && board[((i + 1) * LINE) + (j + 1)] == 'X'
				&& board[((i + 2) * LINE) + (j + 2)] == 'X' && board[((i + 3) * LINE) + (j + 3)] == 'X'
				&& board[((i + 4) * LINE) + (j + 4)] == 'X')
				win = 0;
		}
	}

	return win;
}
