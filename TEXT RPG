#include <iostream>

#define NAME_SIZE 30

class Player
{
private:
	char strPlayerName[NAME_SIZE];
	int nHP;
	int nDamage;
	int nGold;
	
public:
	Player(char* pName, int HP, int Damage, int Gold)
		: nHP(HP), nDamage(Damage), nGold(Gold)
	{
		strcpy_s(strPlayerName, pName);
	}

	void setHP(int HP) { nHP += HP; }
	void setDamage(int Damage) { nDamage += Damage; }
	void setGold(int Gold) { nGold += Gold;  }
	void setStoreGold(int Gold) { nGold -= Gold; }
	void setBattleHP(int HP) { nHP = HP; }
	char* getName() { return strPlayerName; }
	int getHP() { return nHP; }
	int getDamage() { return nDamage; }
	int getGold() { return nGold; }

	void showPlayer()
	{
		std::cout << "\tNAME : " << strPlayerName << std::endl;
		std::cout << "\tHP : " << nHP << std::endl;
		std::cout << "\tDAMAGE : " << nDamage << std::endl;
		std::cout << "\tGOLD : " << nGold << std::endl;
	}
};

class Monster
{
private:
	char strMonsterName[NAME_SIZE];
	int nHP;
	int nDamage;
	int nGold;

public:
	Monster(char* pName, int HP, int Damage, int Gold)
		: nHP(HP), nDamage(Damage), nGold(Gold)
	{
		strcpy_s(strMonsterName, pName);
	}

	void setHP(int HP) { nHP += HP; }
	void setBattleHP(int HP) { nHP = HP; }
	char* getName() { return strMonsterName; }
	int getHP() { return nHP; }
	int getDamage() { return nDamage; }
	int getGold() { return nGold; }

	void showMonster()
	{
		std::cout << "\tNAME : " << strMonsterName << std::endl;
		std::cout << "\tHP : " << nHP << std::endl;
		std::cout << "\tDAMAGE : " << nDamage << std::endl;
		std::cout << "\tGOLD : " << nGold << std::endl;
	}
};

void intro()
{
	std::cout << "==========================" << std::endl;
	std::cout << "||\tTEXT RPG\t||" << std::endl;
	std::cout << "==========================" << std::endl;
}

int main()
{
	char strName[NAME_SIZE];
	intro();
	std::cout << "\tPLAYER NAME : ";
	std::cin >> strName;

	Player p(strName, 100, 5, 100);

	strcpy_s(strName, "GOBLIN");
	Monster m0(strName, 50, 2, 2);

	strcpy_s(strName, "TROLL");
	Monster m1(strName, 500, 20, 20);

	strcpy_s(strName, "DRAGON");
	Monster m2(strName, 5000, 90, 200);

	while (true)
	{
		int nMenu;

		system("cls");
		intro();

		std::cout << "\t01.EASY(GOBLIN)" << std::endl;
		std::cout << "\t02.NORMAL(TROLL)" << std::endl;
		std::cout << "\t03.HARD(DRAGON)" << std::endl;
		std::cout << "\t04.TRAIN" << std::endl;
		std::cout << "\t05.EXIT" << std::endl;
		std::cout << "\tSELECT : ";
		std::cin >> nMenu;

		if (nMenu == 5)
			break;		

		switch (nMenu)
		{
		case 1:
		{
			int tmpPlayerHP = p.getHP();
			int tmpMonsterHP = m0.getHP();

			int PlayerHP;
			int MonsterHP;

			while (true)
			{
				system("cls");
				intro();

				if (p.getHP() <= 0)
					break;
				if (m0.getHP() <= 0)
				{
					p.setGold(m0.getGold());
					break;
				}

				std::cout << "----------- PLAYER ----------" << std::endl;
				p.showPlayer();

				std::cout << "----------- MONSTER ----------" << std::endl;
				m0.showMonster();

				std::cout << "\t01.FIGHT" << std::endl;
				std::cout << "\t02.BACK" << std::endl;
				std::cout << "\tSELECT : ";
				std::cin >> nMenu;

				if (nMenu == 2)
					break;

				if (nMenu == 1)
				{
					PlayerHP = p.getHP() - m0.getDamage();
					p.setBattleHP(PlayerHP);
					MonsterHP = m0.getHP() - p.getDamage();
					m0.setBattleHP(MonsterHP);
					std::cout << p.getName() << " recieved " << m0.getDamage() << " from " << m0.getName() << std::endl;
					std::cout << m0.getName() << " recieved " << p.getDamage() << " from " << p.getName() << std::endl;
				}

				system("pause");
			}

			p.setBattleHP(tmpPlayerHP);
			m0.setBattleHP(tmpMonsterHP);
		}
			break;
		case 2:
		{
			int tmpPlayerHP = p.getHP();
			int tmpMonsterHP = m1.getHP();

			int PlayerHP;
			int MonsterHP;

			while (true)
			{
				system("cls");
				intro();

				if (p.getHP() <= 0)
					break;
				if (m1.getHP() <= 0)
				{
					p.setGold(m1.getGold());
					break;
				}

				std::cout << "----------- PLAYER ----------" << std::endl;
				p.showPlayer();

				std::cout << "----------- MONSTER ----------" << std::endl;
				m1.showMonster();

				std::cout << "\t01.FIGHT" << std::endl;
				std::cout << "\t02.BACK" << std::endl;
				std::cout << "\tSELECT : ";
				std::cin >> nMenu;

				if (nMenu == 2)
					break;

				if (nMenu == 1)
				{
					PlayerHP = p.getHP() - m1.getDamage();
					p.setBattleHP(PlayerHP);
					MonsterHP = m1.getHP() - p.getDamage();
					m1.setBattleHP(MonsterHP);
					std::cout << p.getName() << " recieved " << m1.getDamage() << " from " << m1.getName() << std::endl;
					std::cout << m1.getName() << " recieved " << p.getDamage() << " from " << p.getName() << std::endl;
				}

				system("pause");
			}

			p.setBattleHP(tmpPlayerHP);
			m1.setBattleHP(tmpMonsterHP);
		}
			break;
		case 3:
		{
			int tmpPlayerHP = p.getHP();
			int tmpMonsterHP = m2.getHP();

			int PlayerHP;
			int MonsterHP;

			while (true)
			{
				system("cls");
				intro();

				if (p.getHP() <= 0)
					break;
				if (m2.getHP() <= 0)
				{
					p.setGold(m2.getGold());
					break;
				}

				std::cout << "----------- PLAYER ----------" << std::endl;
				p.showPlayer();

				std::cout << "----------- MONSTER ----------" << std::endl;
				m2.showMonster();

				std::cout << "\t01.FIGHT" << std::endl;
				std::cout << "\t02.BACK" << std::endl;
				std::cout << "\tSELECT : ";
				std::cin >> nMenu;

				if (nMenu == 2)
					break;

				if (nMenu == 1)
				{
					PlayerHP = p.getHP() - m2.getDamage();
					p.setBattleHP(PlayerHP);
					MonsterHP = m2.getHP() - p.getDamage();
					m2.setBattleHP(MonsterHP);
					std::cout << p.getName() << " recieved " << m2.getDamage() << " from " << m2.getName() << std::endl;
					std::cout << m2.getName() << " recieved " << p.getDamage() << " from " << p.getName() << std::endl;
				}

				system("pause");
			}

			p.setBattleHP(tmpPlayerHP);
			m2.setBattleHP(tmpMonsterHP);
		}
			break;
		case 4:
		{
			while (true)
			{
				system("cls");
				intro();

				p.showPlayer();

				std::cout << "\t01.DAMAGE TRAINING(DAMAGE +10)(GOLD -100)" << std::endl;
				std::cout << "\t02.HEALTH TRAINING(HP +20)(GOLD -150)" << std::endl;
				std::cout << "\t03.EXIT" << std::endl;
				std::cout << "\tSELECT : ";
				std::cin >> nMenu;

				if (nMenu == 3)
					break;

				switch (nMenu)
				{
				case 1:
				{
					if (p.getGold() < 100)
					{
						std::cout << "\t-NOT ENOUGH GOLD-" << std::endl;
						break;
					}
					else
					{
						p.setStoreGold(100);
						p.setDamage(10);
					}
				}
					break;
				case 2:
				{
					if (p.getGold() < 150)
					{
						std::cout << "\t-NOT ENOUGH GOLD-" << std::endl;
						break;
					}
					else
					{
						p.setStoreGold(150);
						p.setHP(20);
					}
				}
					break;
				default:
					std::cout << "\t-WRONG INPUT-" << std::endl;
					break;
				}
			}
		}
			break;
		default:
			std::cout << "\t-WRONG INPUT-" << std::endl;
			break;
		}
	}

	return 0;
}
